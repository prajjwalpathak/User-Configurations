{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Competitive Programming": {
		"prefix": "cp",
		"body": [
			"#include <bits/stdc++.h>",
			"#define ll long long",
			"#define sorta(v) sort(v.begin(), v.end())                          // sort ascending: O(N log N)",
			"#define sortd(v, type) sort(v.begin(), v.end(), greater<type>())   // sort descending: O(N log N)",
			"#define maxe(v) *max_element(v.begin(), v.end())                   // find max element in vector: O(N)",
			"#define mine(v) *min_element(v.begin(), v.end())                   // find min element in vector: O(N)",
			"",
			"using namespace std;",
			"",
			"void solve()",
			"{",
			"    int n;$0",
			"    cin >> n;",
			"    vector<int> v(n);",
			"    for (int i = 0; i < n; i++)",
			"    {",
			"        cin >> v[i];",
			"    }",
			"}",
			"",
			"int32_t main()",
			"{",
			"    ios_base::sync_with_stdio(false);",
			"    cin.tie(NULL);",
			"",
			"    int t = 1;",
			"    cin >> t;",
			"    while (t--)",
			"    {",
			"        solve();",
			"    }",
			"    return 0;",
			"}"
		],
		"description": "Competitive Programming"
	}
}
